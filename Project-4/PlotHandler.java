//******************************************************************************
//
// File:    PlotHandler.java
// Package: ---
// Unit:    Class PlotHandler
//
//******************************************************************************

import java.io.File;
import java.io.IOException;
import java.text.DecimalFormat;
import edu.rit.numeric.ListXYSeries;
import edu.rit.numeric.plot.Plot;

/**
 * Class PlotHandler is the delegate for dealing with visualizing the data 
 * generated by the "number crunching" program, MrPotatoHead. 
 * Its purpose is to be instantiated in MrPotatoHead with the data to plot,
 * where the write() method should then be called.
 * <P>
 * Running this program and specifying in the command line arguments the plot 
 * files previously generated will open a graphical representation of these 
 * plots for each file.
 * </P>
 * @author Jimi Ford
 * @version 5-6-2015
 *
 */
public class PlotHandler {

	// private data members
	private final String responseTimeFile;
	private final String dropFractionFile;
	private final ListXYSeries dropFracSeries;
	private final ListXYSeries respTimeSeries;
	
	/**
	 * Construct a new PlotHandler object
	 * 
	 * @param plotFilePrefix the prefix to use for saving the files
	 * @param dropFracSeries the xy-series that contains the drop fraction info
	 * @param respTimeSeries the xy-series that contains the response time info
	 */
	public PlotHandler(String plotFilePrefix, ListXYSeries dropFracSeries,
			ListXYSeries respTimeSeries) {
		responseTimeFile = plotFilePrefix + "-traversal-time.dwg";
		dropFractionFile = plotFilePrefix + "-drop-fraction.dwg";
		this.dropFracSeries = dropFracSeries;
		this.respTimeSeries = respTimeSeries;
	}
	
	/**
	 * Save the plot information into a file and display the plots.
	 * 
	 * @throws IOException if it can't write to the file specified
	 */
	public void write() throws IOException {
		
		
		Plot responseTime = new Plot()
		.plotTitle ("Traversal Time")
		.xAxisTitle ("Mean arrival rate (pkt/sec)")
		.yAxisTitle ("Mean traversal time (sec)")
		.yAxisTickFormat (new DecimalFormat ("0.0"))
		.seriesDots (null)
		.xySeries (respTimeSeries);
		Plot dropFraction = new Plot()
		.plotTitle ("Drop Fraction")
		.xAxisTitle ("Mean arrival rate (pkt/sec)")
		.yAxisTitle ("Drop fraction")
		.yAxisStart (0.0)
		.yAxisEnd (1.0)
		.yAxisTickFormat (new DecimalFormat ("0.0"))
		.seriesDots (null)
		.xySeries (dropFracSeries);
		Plot.write(responseTime, new File(responseTimeFile));
		Plot.write(dropFraction, new File(dropFractionFile));
		responseTime.getFrame().setVisible (true);
		dropFraction.getFrame().setVisible (true);
	}
	
	/**
	 * Open a GUI for each plot in order to visualize the results of a
	 * previously run set of simulations.
	 * 
	 * @param args each plot file generated that you wish to visualize
	 */
	public static void main(String args[]) {
		if(args.length < 1) {
			System.err.println("Must specify at least 1 plot file.");
			usage();
		}
		
		for(int i = 0; i < args.length; i++) {
			try {
				Plot plot = Plot.read(args[i]);
				plot.getFrame().setVisible(true);
			} catch (ClassNotFoundException e) {
				System.err.println("Could not deserialize " + args[i]);
			} catch (IOException e) {
				System.err.println("Could not open " + args[i]);
			} catch (IllegalArgumentException e) {
				System.err.println("Error in file " + args[i]);
			}
		}
	}
	
	/**
	 * Print the usage message for this program and gracefully exit.
	 */
	private static void usage() {
		System.err.println("usage: java PlotHandler <plot-file-1> "+
				"(<plot-file-2> <plot-file-3>... etc.)");
		System.exit(1);
	}
}
